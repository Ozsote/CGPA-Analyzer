#include<iostream>
#include <string>
#include <fstream>
#include <sstream>
using namespace std;
class student 
{
	string matric;
	string name;
	string addr;
	string course;
	public: 
	int current_sem;
	student()
	{
		
	}
	void getdata()
	{
		cout<<"\n Enter the student matric id:";
		cin.ignore(10000,'\n');
		getline(cin,matric);
		cout<<"\n Enter the student name:";
		getline(cin,name);
		cin.ignore(10000,'\n');
		cout<<"\n Enter the student address:";
		getline(cin,addr);
		cin.ignore(10000,'\n');
		cout<<"\n Enter the student course:";
		getline(cin,course);
		cin.ignore(10000,'\n');
		cout<<"\n Enter the current semester for the student:";
		cin>>current_sem;
	}
	void intofile(ofstream &output)
	{
		output<<this->matric<<":";
		output<<this->name<<":";
		output<<this->addr<<":";
		output<<this->course<<":";
		output<<this->current_sem<<"\n";
	}
	void outfromfile(string a,string b,string c,string d,int u)
	{
		/*getline (input,matric,':');
		//cout<<matric<<"\n";
		getline (input,name,':');
		//cout<<name<<'\n';
		getline (input,addr,':');
		//cout<<addr<<'\n';
		getline (input,course,':');
		//cout<<city<<'\n';
		getline(input,to_string((long long)current_sem),'\n');
		//cout<<current_sem<<'\n';*/
		matric=a;
		name=b;
		addr=c;
		course=d;
		current_sem=u;
		
	}

	void putdata()
	{
		cout<<"\n the student matric id:"<<this->matric;
		cout<<"\n the student name:"<<this->name;
		cout<<"\n the student course:"<<this->course;
	}
	bool search(string s)
	{
		if (matric==s)
			return true;
		else 
			return false;
	}
};
class calculateCGPA
{
	int sub;
	float CGPA;
	float* GPA;
	int* credit;
public:
	float subj_input()
	{
		float tot=0;
		int total_credit=0;
		cout<<"\nHow many subjects does this student take this semester?:";
		cin>>sub;
		for(int i=0;i<sub;i++)
		{
			cout<<"\nPlease enter the current GPA(Grade Pointer Average) and credits for subject "<<i+1<<" (Input example:3.2 3):";
			cin>>GPA[i]>>credit[i];
			tot=GPA[i]*credit[i];
			total_credit=total_credit+credit[i];
		}
		return tot/total_credit;
	}
	void evaluate()
	{
	}
};
class marks: public student ,public calculateCGPA
{
	float* gpa;
	float prev_cgpa,cgpa;
	int per;
	calculateCGPA cg[10];
	public: 
	void input()
	{
		int x;
		
		cout<<"Please enter which semester do you want to input the data to:";
			cin>>x;
			cout<<endl;
			if(x!=1)
			{
				cout<<"Do you want to manually inserted information for every subject GPA starting from semester 1(Y/y) or do you want to insert the current CGPA with the previous semesters CGPA(previous CGPA means the total of Grade Pointer Average of previous sems summarized to one number)(N/n):?";
				char choose;
				cin>>choose;
				do
				{
				switch(choose)
				{
				case 'Y':
				case 'y':
					cgpa=0;
					for(int i=0;i<current_sem;i++)
					{
						cout<<"\nPlease enter gpa for all subjects for semester "<<i+1<<endl;
						cgpa=cgpa+cg[i].subj_input();
					}
					break;
				case 'n':
				case 'N':
					cout<<"\n\nPlease enter you previous semesters' Cumulative Grade Pointer Average (CGPA):";
					cin>>prev_cgpa;
					cout<<"\n";
					cg[x].subj_input();
					break;
				default:
					cout<<"Please try again"<<endl;
				}
				}while(choose!='Y' || choose!='y' || choose!='N' || choose!='n' );

			}
			else
			{
				cgpa=0;
				for(int i=0;i<current_sem;i++)
					{
						cout<<"\nPlease enter gpa for all subjects for semester "<<i+1<<endl;
						cgpa=cgpa+cg[i].subj_input();
					}
			}

	}
	void output()
	{
		putdata();
		
	}
	
};

 
int main()
{
	for(int i=0;i<45;i++)
	{
		cout<<"//";
	}
	string filed,outfiled;
	cout<<"Please create your file (Any name):";
	getline(cin,filed);
	cout<<"\n";
	filed.append(".txt");
	ofstream makefile(filed);
	
	//makefile.close();
	//ifstream infile(filed);
	if (!makefile.is_open())
	{
		cout<<"File cant be opened.Please try again."<<endl;
		return -1;
	}
	marks* m1;
	m1=new marks [100];
	int ch;
	
	do 
	{
		cout<<"\n1.Enter data";
		cout<<"\n2.Search for data";
		cout<<"\n3. File processor";
		cout<<"\n4.exit";
		cout<<"\n Please enter your input accordingly:";
		cin>>ch;
		
			if(ch==1)
			{
			cout<<"Please insert the number of students you wish to entered the information to:";
			int inf;
			cin>>inf;
			for(int i=0;i<inf;i++)
			{
			m1[i].getdata();
			m1[i].intofile(makefile);
			//m1[i].input();
			}
			exit;
			}
			
 
			else if(ch==2)
			{
			cout<<"Please enter the matric id of the students you want to search:";
			string searching;
			int temp;
			cin.ignore(10000,'\n');
			getline(cin,searching);
			for(int i=0;i<100;i++)
			{
				if(m1[i].search(searching)==1)
				{cout<<"found"<<endl;
					temp=i;}
			}
			exit;
			}
 
			else if(ch==3)
			{
			string line,comma_string;
			string a,b,c,d,temp[5];
			char point;
			int e,etemp=0;
			int count=0;
			string delimiter=":";
			cout<<"Enter the name of your file :";
			cin>>outfiled;
			cin.ignore(10000,'\n');
			outfiled.append(".txt");
			ifstream gototheinput(outfiled);
			
			while (getline(gototheinput, line))
			{
				istringstream iss(line);
			
			if (!(iss >> a)) { cout<<"lol"<<endl;
				break; } // error
				//m1[i].outfromfile(a,b,c,d,e);
			int i=0;
			size_t pos = 0;
			string token;
			while ((pos = a.find(delimiter)) != std::string::npos) 
			{
			 token = a.substr(0, pos);
			 temp[i]=token;
			a.erase(0, pos + delimiter.length());
			i++;
			}
			a=temp[0];
			b=temp[1];
			c=temp[2];
			d=temp[3];
			e=stoi(temp[4]);
			m1[count].outfromfile(a,b,c,d,e);
				count++;
			}
			
			
			//int rolling;
			//gototheinput>>rolling;
			//cout<<rolling<<'\n';
			
			
			/*while (getline(gototheinput, line))
			{
				istringstream iss(line);
			
			if (!(iss >> a>>point>>b>>point>>c>>point>>d>>point>>e)&&(point==':')) { cout<<"lol"<<endl;
				break; } // error
				cout<<i<<"aloaoaaolaa"<<endl;
			 // process pair (a,b)

			}*/
			/*while((gototheinput>>a>>point>>b>>point>>c>>point>>d>>point>>e)&&(point==':'))
			{
				m1[i].outfromfile(a,b,c,d,e);
				i++;
				cout<<i<<endl;
			}	*/
			
			for(int i=0;i<count;i++)
			{
				m1[i].putdata();
			}
			gototheinput.close();
			//m1[0].calculate();
			exit;
			}

			
		
	} while (ch!=5);
	makefile.close();
	delete [] m1;
	return 0;
}